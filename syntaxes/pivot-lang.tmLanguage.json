{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pivot-lang",
	"patterns": [
		{
			"include": "#strings"
		},
		{
			"name": "comment",
			"match": "//.*$"
		},
		{
			"include": "#use"
		},
		{
			"include": "#sumtype"
		},
		{
			"include": "#expr.as"
		},
		{
			"include": "#expr.is"
		},
		{
			"include": "#array"
		},
		{
			"include": "#impl"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#function"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#char"
		},
		{
			"include": "#numberic"
		},
		{
			"include": "#function.call"
		},
		{
			"include": "#macro.call"
		},
		{
			"include": "#namespace.prefix"
		},
		{
			"include": "#variable"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(if|while|for|return|else|break|continue|yield|match)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(struct|fn|let|use|const|true|false|impl|self|trait|pub|where|macro|type|as|is|gen|var)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				}
			]
		},
		"char": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"match": "\\b(struct|trait)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(<[^>]*>)?",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "entity.name.type"
						},
						"3": {
							"patterns": [
								{
									"include": "#typename"
								}
							]
						}
					}
				}
			]
		},
		"variable": {
			"name": "variable",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		"typename": {
			"name": "entity.name.type",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		"ns": {
			"name": "entity.name.namespace",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		"sumtype": {
			"match": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(<[^>]*>)?\\s*=\\s*(([a-zA-Z_][a-zA-Z0-9_]*\\s*(<[^>]*>)?\\|)*[a-zA-Z_][a-zA-Z0-9_]*\\s*(<[^>]*>)?)",
			"captures": {
				"1": {
					"name": "keyword"
				},
				"2": {
					"name": "entity.name.type"
				},
				"3": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"use": {
			"patterns": [
				{
					"match": "\\b(use)\\s+(([a-zA-Z_][a-zA-Z0-9_]*)(::[a-zA-Z_][a-zA-Z0-9_]*)*)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"patterns": [
								{
									"include": "#ns"
								}
							]
						}
					}
				}
			]
		},
		"namespace.prefix": {
			"match": "\\b(([a-zA-Z_][a-zA-Z0-9_]*)::)+",
			"captures": {
				"1": {
					"name": "entity.name.namespace"
				}
			}
		},
		"function.call": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(<[^>]*>)?\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function"
				},
				"2": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"macro.call": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)!\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function"
				}
			}
		},
		"expr.as": {
			"match": "\\b(as)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "keyword"
				},
				"2": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"expr.is": {
			"match": "\\b(is)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "keyword"
				},
				"2": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"array": {
			"match": "\\[([a-zA-Z_][a-zA-Z0-9_]*)\\*([^\\;]+)\\;",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#expr.as"
						},
						{
							"include": "#expr.is"
						},
						{
							"include": "#struct"
						},
						{
							"include": "#use"
						},
						{
							"include": "#function"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#char"
						},
						{
							"include": "#numberic"
						},
						{
							"include": "#function.call"
						},
						{
							"include": "#macro.call"
						},
						{
							"include": "#namespace.prefix"
						},
						{
							"include": "#variable"
						}
					]
				}
			}
		},
		"function": {
			"match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(<[^>]*>)?\\s*\\(([^\\)]*)\\)\\s*([^\\{]*)",
			"captures": {
				"1": {
					"name": "keyword"
				},
				"2": {
					"name": "entity.name.function"
				},
				"3": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#annotated.param"
						},
						{
							"include": "#variable"
						}
					]
				},
				"5": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"impl": {
			"match": "\\b(impl)\\s*(<[^>]+>)?\\s*([a-zA-Z_][a-zA-Z0-9_\\:]*)?\\s*(<[^>]+>)?\\s*(for)?\\s*([a-zA-Z_][a-zA-Z0-9_\\:]*)\\s*(<[^>]+>)?\\s*\\{",
			"captures": {
				"1": {
					"name": "keyword"
				},
				"2": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"5": {
					"name": "keyword"
				},
				"6": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				},
				"7": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"annotated.param": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([^,]*)",
			"captures": {
				"1": {
					"name": "variable.parameter"
				},
				"2": {
					"patterns": [
						{
							"include": "#typename"
						}
					]
				}
			}
		},
		"decimal": {
			"name": "constant.numeric",
			"match": "\\b([\\d_]+(\\.[\\d_]+)?(e[+-]?\\d+)?)\\b"
		},
		"hex": {
			"name": "constant.numeric",
			"match": "\\b0x[0-9a-fA-F_]+\\b"
		},
		"octal": {
			"name": "constant.numeric",
			"match": "\\b0o[0-7_]+\\b"
		},
		"binary": {
			"name": "constant.numeric",
			"match": "\\b0b[01_]+\\b"
		},
		"float": {
			"name": "constant.numeric",
			"match": "\\b[\\d_]+\\.[\\d_]+\\b"
		},
		"integer": {
			"name": "constant.numeric",
			"match": "\\b[\\d_]+\\b"
		},
		"numberic": {
			"name": "constant.numeric",
			"patterns": [
				{
					"include": "#decimal"
				},
				{
					"include": "#hex"
				},
				{
					"include": "#octal"
				},
				{
					"include": "#binary"
				},
				{
					"include": "#float"
				},
				{
					"include": "#integer"
				}
			]
		}
	},
	"scopeName": "source.pivot-lang"
}